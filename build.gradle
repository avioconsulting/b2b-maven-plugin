group 'com.avioconsulting'
version '1.0.4'

configurations {
    provided
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'


sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

sourceCompatibility = 1.5

repositories {
    mavenLocal()
    mavenCentral()
}

task pluginDescriptor( type: Exec ) {
    commandLine 'mvn', '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    doFirst {
        final File pom = project.file( 'pom.xml' )
        install.repositories.mavenInstaller.pom.writeTo( pom )
        assert pom.file, "[$pom.canonicalPath] was not created"

        pom.text = pom.text.
                replace( '<groupId>unknown</groupId>',             "<groupId>${project.group}</groupId>" ).
                replace( '<artifactId>empty-project</artifactId>', "<artifactId>${project.name}</artifactId>" ).
                replace( '<version>0</version>',                   """
                                                              |<version>${version}</version>
                                                              |  <packaging>maven-plugin</packaging>
                                                              |  <build>
                                                              |    <directory>\${project.basedir}/build</directory>
                                                              |    <outputDirectory>\${project.build.directory}/classes/main</outputDirectory>
                                                              |  </build>
                                                              |""".stripMargin().trim())
    }
    doLast {
        final  pluginDescriptor = new File(( File ) project.compileGroovy.destinationDir, 'META-INF/maven/plugin.xml' )
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}

project.compileGroovy.doLast{ pluginDescriptor.execute() }

dependencies {
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'org.apache.ant:ant:1.9.7'
    compile 'org.apache.maven:maven-plugin-api:3.3.9'
    provided 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.5'
    def mvnProject = 'org.apache.maven:maven-project:3.0-alpha-2'
    // use explicitly in tests but Maven will provide the dependency at runtime
    provided mvnProject
    testCompile mvnProject
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.apache.commons:commons-io:1.3.2'
}
